package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;

import java.io.IOException;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class memoryGameController extends Application {
	 private static final int NUM_ROWS = 4;
	    private static final int NUM_COLS = 4;
	    private static final int NUM_IMAGES = NUM_ROWS * NUM_COLS / 2;

	    private Button[][] buttons;
	    private Image[][] images;
	    private boolean[][] matched;

	    private int firstRow = -1;
	    private int firstCol = -1;
	    private int secondRow = -1;
	    private int secondCol = -1;

	    private int remainingPairs;
	    private Text pairsText;
	    private Text timerText;
	    private int secondsPassed;
	    private boolean gameRunning;

	// Event Listener on ToggleButton.onAction
	@FXML
	public void btnStartGame(ActionEvent event) {
		// TODO Autogenerated
		Stage primaryStage = new Stage();
		start(primaryStage);
		primaryStage.show();
		
	}
	
	public void start(Stage primaryStage) {
		buttons = new Button[NUM_ROWS][NUM_COLS];
        images = new Image[NUM_ROWS][NUM_COLS];
        matched = new boolean[NUM_ROWS][NUM_COLS];
        remainingPairs = NUM_IMAGES;

        GridPane gridPane = new GridPane();
        gridPane.setAlignment(Pos.CENTER);
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        
        Button returnButton = new Button("Regresar al menu");
		returnButton.setStyle("-fx-font-size: 2em;");
		returnButton.setOnAction(new EventHandler<ActionEvent>() {
			@Override public void handle (ActionEvent actionEvent) {
				
				
				try {
					menu();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}			
			}
		});
		
		HBox buttonBox = new HBox(8);
		buttonBox.getChildren().addAll(returnButton);

        for (int row = 0; row < NUM_ROWS; row++) {
            for (int col = 0; col < NUM_COLS; col++) {
                Button button = new Button();
                button.setMinSize(100, 100);
                final int currentRow = row;
                final int currentCol = col;
                button.setOnAction(evt -> handleButtonAction(currentRow, currentCol));
                gridPane.add(button, col, row);
                buttons[row][col] = button;
            }
        }

        pairsText = new Text("Remaining Pairs: " + remainingPairs);
        timerText = new Text("Time: 0 seconds");
        HBox statusBox = new HBox(20, pairsText, timerText);
        statusBox.setAlignment(Pos.CENTER);

        Scene scene = new Scene(new javafx.scene.layout.VBox(20, gridPane, statusBox), 500, 550);
        primaryStage.setTitle("Juego de Memoria");
        primaryStage.setScene(scene);
        primaryStage.show();

        initializeImages();
        shuffleImages();
        startGame();
	}

	    private void initializeImages() {
	        //Image commonBackground = new Image("image9.jpg");
	        for (int i = 0; i < NUM_IMAGES; i++) {
	            Image image = new Image("file:///C:/Users/User/Desktop/Eclipse/The_Kids_Battle/src/application/image" + i + ".jpg");
	            for (int j = 0; j < 2; j++) {
	                int row, col;
	                do {
	                    row = (int) (Math.random() * NUM_ROWS);
	                    col = (int) (Math.random() * NUM_COLS);
	                } while (images[row][col] != null);
	                images[row][col] = image;
	            }
	        }
	    }

	    private void shuffleImages() {
	        for (int i = 0; i < NUM_ROWS; i++) {
	            for (int j = 0; j < NUM_COLS; j++) {
	                if (images[i][j] != null) {
	                    matched[i][j] = false;
	                   buttons[i][j].setGraphic(new ImageView(new Image("file:images/blank.jpg")));
	                }
	            }
	        }
	    }

	    private void handleButtonAction(int row, int col) {
	        if (!gameRunning || matched[row][col] || firstRow == row && firstCol == col)
	            return;

	        if (firstRow == -1 && firstCol == -1) {
	            firstRow = row;
	            firstCol = col;
	            ImageView imageView = new ImageView(images[row][col]);
	            imageView.setFitWidth(buttons[row][col].getMinWidth());
	            imageView.setFitHeight(buttons[row][col].getMinHeight());
	            buttons[row][col].setGraphic(imageView);
	        } else if (secondRow == -1 && secondCol == -1) {
	            secondRow = row;
	            secondCol = col;
	            ImageView imageView = new ImageView(images[row][col]);
	            imageView.setFitWidth(buttons[row][col].getMinWidth());
	            imageView.setFitHeight(buttons[row][col].getMinHeight());
	            buttons[row][col].setGraphic(imageView);

	            if (images[firstRow][firstCol].equals(images[secondRow][secondCol])) {
	                matched[firstRow][firstCol] = true;
	                matched[secondRow][secondCol] = true;
	                remainingPairs--;
	                pairsText.setText("Remaining Pairs: " + remainingPairs);
	                checkGameEnd();
	            } else {
	                buttons[firstRow][firstCol].setGraphic(new ImageView(new Image("file:images/blank.jpg")));
	                buttons[secondRow][secondCol].setGraphic(new ImageView(new Image("file:images/blank.jpg")));
	            }

	            firstRow = -1;
	            firstCol = -1;
	            secondRow = -1;
	            secondCol = -1;
	        }
	    }

	    private void checkGameEnd() {
	        if (remainingPairs == 0) {
	            stopGame();
	            Alert alert = new Alert(AlertType.INFORMATION);
	            alert.setTitle("Juego de Memoria");
	            alert.setHeaderText(null);
	            alert.setContentText("Â¡Has ganado!");
	            alert.showAndWait();
	            shuffleImages();
	            remainingPairs = NUM_IMAGES;
	            pairsText.setText("Remaining Pairs: " + remainingPairs);
	            //startGame();
	            try {
					menu();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        }
	    }

	    private void startGame() {
	        secondsPassed = 0;
	        timerText.setText("Time: " + secondsPassed + " seconds");
	        gameRunning = true;
	        new Thread(() -> {
	            while (gameRunning) {
	                try {
	                    Thread.sleep(1000);
	                    secondsPassed++;
	                    timerText.setText("Time: " + secondsPassed + " seconds");
	                } catch (InterruptedException e) {
	                    e.printStackTrace();
	                }
	            }
	        }).start();
	    }

	    private void stopGame() {
	        gameRunning = false;
	    }


	    private void menu() throws IOException {
		     
	        Stage secondStage = new Stage(); 
	        Parent root = FXMLLoader.load(getClass().getResource("menu.fxml"));
	        secondStage.setTitle("The Kids Battle");
	        secondStage.setScene(new Scene(root));
	        secondStage.show();
	    
	}
		

	    /*public static void main(String[] args) {
	        launch(args);
	    }*/
	
}
